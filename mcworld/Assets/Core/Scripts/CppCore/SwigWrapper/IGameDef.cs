//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IGameDef : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IGameDef(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IGameDef obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IGameDef() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          mcworld_client_corePINVOKE.delete_IGameDef(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual bool init(GameInitParam param) {
    bool ret = mcworld_client_corePINVOKE.IGameDef_init(swigCPtr, GameInitParam.getCPtr(param));
    if (mcworld_client_corePINVOKE.SWIGPendingException.Pending) throw mcworld_client_corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool unInit() {
    bool ret = mcworld_client_corePINVOKE.IGameDef_unInit(swigCPtr);
    return ret;
  }

  public virtual bool connect(string ip, ushort port) {
    bool ret = mcworld_client_corePINVOKE.IGameDef_connect(swigCPtr, ip, port);
    return ret;
  }

  public virtual bool login(LoginParam param) {
    bool ret = mcworld_client_corePINVOKE.IGameDef_login(swigCPtr, LoginParam.getCPtr(param));
    if (mcworld_client_corePINVOKE.SWIGPendingException.Pending) throw mcworld_client_corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool ready() {
    bool ret = mcworld_client_corePINVOKE.IGameDef_ready(swigCPtr);
    return ret;
  }

  public virtual bool logout() {
    bool ret = mcworld_client_corePINVOKE.IGameDef_logout(swigCPtr);
    return ret;
  }

  public virtual bool timeSync() {
    bool ret = mcworld_client_corePINVOKE.IGameDef_timeSync(swigCPtr);
    return ret;
  }

  public virtual void sendMessage(int protocol, System.IntPtr data, int size) {
    mcworld_client_corePINVOKE.IGameDef_sendMessage(swigCPtr, protocol, new global::System.Runtime.InteropServices.HandleRef(null, data), size);
  }

  public virtual bool step(float time) {
    bool ret = mcworld_client_corePINVOKE.IGameDef_step(swigCPtr, time);
    return ret;
  }

  public virtual bool updatePosition(short x, short y, short z) {
    bool ret = mcworld_client_corePINVOKE.IGameDef_updatePosition(swigCPtr, x, y, z);
    return ret;
  }

  public virtual IMap getMap() {
    global::System.IntPtr cPtr = mcworld_client_corePINVOKE.IGameDef_getMap(swigCPtr);
    IMap ret = (cPtr == global::System.IntPtr.Zero) ? null : new IMap(cPtr, false);
    return ret;
  }

  public virtual IItemDefManager getItemDefManager() {
    global::System.IntPtr cPtr = mcworld_client_corePINVOKE.IGameDef_getItemDefManager(swigCPtr);
    IItemDefManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new IItemDefManager(cPtr, false);
    return ret;
  }

  public virtual INodeDefManager getNodeDefManager() {
    global::System.IntPtr cPtr = mcworld_client_corePINVOKE.IGameDef_getNodeDefManager(swigCPtr);
    INodeDefManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new INodeDefManager(cPtr, false);
    return ret;
  }

  public virtual ICraftDefManager getCraftDefManager() {
    global::System.IntPtr cPtr = mcworld_client_corePINVOKE.IGameDef_getCraftDefManager(swigCPtr);
    ICraftDefManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new ICraftDefManager(cPtr, false);
    return ret;
  }

}
