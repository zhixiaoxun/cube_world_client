//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class LoginParam : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LoginParam(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LoginParam obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~LoginParam() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          mcworld_client_corePINVOKE.delete_LoginParam(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public LoginParam() : this(mcworld_client_corePINVOKE.new_LoginParam(), true) {
  }

  public uint uid {
    set {
      mcworld_client_corePINVOKE.LoginParam_uid_set(swigCPtr, value);
    } 
    get {
      uint ret = mcworld_client_corePINVOKE.LoginParam_uid_get(swigCPtr);
      return ret;
    } 
  }

  public string name {
    set {
      mcworld_client_corePINVOKE.LoginParam_name_set(swigCPtr, value);
      if (mcworld_client_corePINVOKE.SWIGPendingException.Pending) throw mcworld_client_corePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = mcworld_client_corePINVOKE.LoginParam_name_get(swigCPtr);
      if (mcworld_client_corePINVOKE.SWIGPendingException.Pending) throw mcworld_client_corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint roleid {
    set {
      mcworld_client_corePINVOKE.LoginParam_roleid_set(swigCPtr, value);
    } 
    get {
      uint ret = mcworld_client_corePINVOKE.LoginParam_roleid_get(swigCPtr);
      return ret;
    } 
  }

  public int wid {
    set {
      mcworld_client_corePINVOKE.LoginParam_wid_set(swigCPtr, value);
    } 
    get {
      int ret = mcworld_client_corePINVOKE.LoginParam_wid_get(swigCPtr);
      return ret;
    } 
  }

  public ulong login_session {
    set {
      mcworld_client_corePINVOKE.LoginParam_login_session_set(swigCPtr, value);
    } 
    get {
      ulong ret = mcworld_client_corePINVOKE.LoginParam_login_session_get(swigCPtr);
      return ret;
    } 
  }

  public string token {
    set {
      mcworld_client_corePINVOKE.LoginParam_token_set(swigCPtr, value);
      if (mcworld_client_corePINVOKE.SWIGPendingException.Pending) throw mcworld_client_corePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = mcworld_client_corePINVOKE.LoginParam_token_get(swigCPtr);
      if (mcworld_client_corePINVOKE.SWIGPendingException.Pending) throw mcworld_client_corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
